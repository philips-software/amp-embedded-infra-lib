---
name: Continuous Integration

on:
  push:
    branches:
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

env:
  CMAKE_BUILD_PARALLEL_LEVEL: 2
  GTEST_COLOR: 1
jobs:
  host_build_test:
    name: Host Build & Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
      - name: Build and Test
        run: |
          cmake -B Build -DCMAKE_BUILD_TYPE=Debug
          cmake --build Build --config Debug
          pushd Build && ctest -Q -C Debug -T Test --no-compress-output --output-on-failure
  embedded_build:
    name: Embedded Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        gcc: ["5-2016-q3", "6-2017-q2", "7-2018-q2", "8-2019-q3"]
    steps:
      - uses: actions/checkout@v2
      - name: Install GNU Arm Embedded Toolchain ${{ matrix.gcc }}
        uses: carlosperate/arm-none-eabi-gcc-action@v1
        with:
          release: ${{ matrix.gcc }}
      - uses: seanmiddleditch/gha-setup-ninja@v3
      - uses: hendrikmuhs/ccache-action@v1
        with:
          key: ${{ matrix.gcc }}
      - run: |
          cmake -B Build-Host -G Ninja -DCMAKE_BUILD_TYPE=Release -DEMIL_BUILD_TESTS=Off -DEMIL_BUILD_EXAMPLES=Off -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          cmake --build Build-Host --config Release
          cmake -B Build -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_PREFIX_PATH=${{ github.workspace }}/Build-Host -DCMAKE_TOOLCHAIN_FILE=cmake/toolchain-arm-gcc.cmake -DEMIL_PACKAGE_CONFIG_IMPORT_NAMESPACE="emil::"
          cmake --build Build --config Release
  static_analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    env:
      SONAR_SCANNER_VERSION: 4.6.1.2450
      SONAR_SERVER_URL: "https://sonarcloud.io"
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Disable shallow clone to enable blame information
      - uses: seanmiddleditch/gha-setup-ninja@v3
      - uses: actions/setup-python@v1
      - uses: BSFishy/pip-action@v1
        with:
          packages: gcovr
      - name: Install Sonar Scanner
        env:
          SONAR_SCANNER_URL: https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip
          SONAR_WRAPPER_URL: ${{ env.SONAR_SERVER_URL }}/static/cpp/build-wrapper-linux-x86.zip
        run: |
          wget -qN "${{ env.SONAR_WRAPPER_URL }}"
          wget -qN "${{ env.SONAR_SCANNER_URL }}"
          unzip -qqo build-wrapper-linux-x86.zip
          unzip -qqo "sonar-scanner-cli-${{ env.SONAR_SCANNER_VERSION }}-linux.zip"
          echo "${PWD}/build-wrapper-linux-x86" >> $GITHUB_PATH
          echo "${PWD}/sonar-scanner-${{ env.SONAR_SCANNER_VERSION }}-linux/bin" >> $GITHUB_PATH
      - uses: hendrikmuhs/ccache-action@v1
      - name: Build
        run: |
          cmake -B Build -G Ninja -DEMIL_ENABLE_COVERAGE=ON -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} cmake --build Build --config Debug
          pushd Build && ctest -Q -C Debug -T Test --no-compress-output --output-on-failure && popd
          gcovr --sonarqube=coverage.xml --exclude-lines-by-pattern '.*assert\(.*\);|.*really_assert\(.*\);' --exclude-unreachable-branches --exclude-throw-branches -j 2 --exclude=.*/generated/.* --exclude=.*/examples/.* --exclude=.*/external/.* --exclude=.*/lwip/.* --exclude=.*/tracing/.* --exclude=.*/test/.*
      - name: Analysis
        env:
          # to get access to secrets.SONAR_TOKEN, provide GITHUB_TOKEN
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          export SONAR_PROJECT_VERSION=`grep -m 1 -o '".*"' Build/[Vv]ersion.h | tr -d '"'`
          sonar-scanner -D sonar.host.url="${{ env.SONAR_SERVER_URL }}" -D sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}"
