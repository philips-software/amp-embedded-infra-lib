syntax = "proto3";

import "EchoAttributes.proto";

package gap;
option java_package = "com.philips.emil.protobufEcho";
option java_outer_classname = "GapProto";

message Address
{
    bytes address = 1 [(bytes_size) = 6];
}

// Link layer states of a device in a Peripheral or Central role
// Peripheral role states are standby, connected and advertising.
// Central role states are standby, scanning, connected and initiating.
// Allowed transitions are as follows.
// 1. Every state can go to standby.
// 2. Every state can be entered from standby except the connected state.
// 3. Connected state can only be entered from advertising and initiating states.
// For further details refer to Section 1.1, BLUETOOTH CORE SPECIFICATION Version 5.3 | Vol 6, Part B  
message State
{
    enum Event
    {
        standby = 0;
        scanning = 1;
        connected = 2;
        advertising = 3;
        initiating = 4;
    }
    Event value = 1;
}

message IoCapabilities
{
    enum IoCapabilitiesEnum
    {
        None = 0;
        Display = 1;
        DisplayYesNo = 2;
        Keyboard = 3;
        KeyboardDisplay = 4;
    }

    IoCapabilitiesEnum ioCaps = 1;
}

message SecurityLevel
{
    enum SecurityLevelEnum
    {
        None = 0;
        UnauthenticatedPairing = 1;
        AuthenticatedPairing = 2;
        AuthenticatedPairingWithLE = 3;
    }

    SecurityLevelEnum level = 1;
}

message AdvertisementType
{
    enum AdvertisementTypeEnum
    {
        AdvInd = 0;
        AdvNonconnInd = 1;
    }

    AdvertisementTypeEnum type = 1;
}

message SecurityModeAndLevel
{
    enum SecurityLevelEnum
    {
        none = 0;
        unauthenticatedPairing = 1;
        authenticatedPairing = 2;
        authenticatedPairingWithLE = 3;
    }

    enum SecurityModeEnum
    {
        mode1 = 0;
        mode2 = 1;
    }

    SecurityModeEnum mode = 1;
    SecurityLevelEnum level = 2;
}

message AddressType
{
    enum AddressTypeEnum
    {
        publicAddress = 0;
        randomAddress = 1;
    }

    AddressTypeEnum type = 1;
}

message AdvertisementMode
{
    AdvertisementType type = 1;
    uint32 advInterval = 2;
}

message AdvertisementData
{
    bytes data = 1 [(bytes_size) = 31];
}

message ConnectionParameters
{
    Address address = 1;
    AddressType addressType = 2;
    uint32 initiatingTimeoutInMs = 3;
}

message Passkey
{
    int32 passkey = 1;
    bool numericComparison = 2;
}

message PairingStatus
{
    enum Error
    {
        passkeyEntryFailed = 0;
        authenticationRequirementsNotMet = 1;
        pairingNotSupported = 2;
        insufficientEncryptionKeySize = 3;
        numericComparisonFailed = 4;
        timeout = 5;
        encryptionFailed = 6;
        unknown = 7;
    }

    Error error = 1;
};

message DiscoveredDevice
{
    Address address = 1;
    AddressType addressType = 2;
    bytes data = 3 [(bytes_size) = 32];
    int32 rssi = 4;
    bool isScanResponse = 5;
}

message DeviceDiscoveryFilter
{
    enum Filter
    {
        address = 0;
        advertisingData = 1; // Filtering on contents of Manufacturer specific data

    }

    Filter filter = 1;
    bytes data = 2 [(bytes_size) = 32];
};

message BoolValue
{
    bool value = 1;
}

message UInt32Value
{
    uint32 value = 1;
}

service GapPeripheral
{
    option (service_id) = 32;

    // Allowed states: standby
    rpc Advertise(AdvertisementMode) returns (Nothing) { option (method_id) = 1; }
    
    // Allowed states: advertising, connected
    rpc Standby(Nothing) returns (Nothing) { option (method_id) = 2; }
    
    rpc SetAdvertisementData(AdvertisementData) returns (Nothing) { option (method_id) = 3; }
    rpc SetScanResponseData(AdvertisementData) returns (Nothing) { option (method_id) = 4; }
    rpc SetAllowPairing(BoolValue) returns (Nothing) { option (method_id) = 5; }
    rpc SetSecurityMode(SecurityModeAndLevel) returns (Nothing) { option (method_id) = 6; }
    rpc SetIoCapabilities(IoCapabilities) returns (Nothing) { option (method_id) = 7; }
    rpc RemoveAllBonds(Nothing) returns (Nothing) { option (method_id) = 8; }

    // Allowed states: advertising
    rpc GetResolvableAddress(Nothing) returns (Nothing) { option (method_id) = 9; }
}

service GapCentral
{
    option (service_id) = 33;

    // Allowed states: standby
    rpc StartDeviceDiscovery(Nothing) returns (Nothing) { option (method_id) = 1; }
    
    // Allowed states: standby
    rpc StopDeviceDiscovery(Nothing) returns (Nothing) { option (method_id) = 2; }

    // Allowed states: standby
    // For successful connection establishment, state will follow: standby -> initiating -> connected
    // For falied connection establishment, state will follow: standby -> initiating -> standby 
    rpc Connect(ConnectionParameters) returns (Nothing) { option (method_id) = 3; }

    // Allowed states: initiating
    rpc CancelConnect(Nothing) returns (Nothing) { option (method_id) = 4; }

    // Allowed states: connected
    rpc Disconnect(Nothing) returns (Nothing) { option (method_id) = 5; }

    // Allowed states: connected
    rpc Pair(Nothing) returns (Nothing) { option (method_id) = 6; }
    
    rpc SetSecurityMode(SecurityModeAndLevel) returns (Nothing) { option (method_id) = 7; }
    rpc SetIoCapabilities(IoCapabilities) returns (Nothing) { option (method_id) = 8; }
    rpc AuthenticateWithPasskey(UInt32Value) returns (Nothing) { option (method_id) = 9; }
    rpc NumericComparisonConfirm(BoolValue) returns (Nothing) { option (method_id) = 10; }
    rpc RemoveAllBonds(Nothing) returns (Nothing) { option (method_id) = 11; }
    rpc SetDeviceDiscoveryFilter(DeviceDiscoveryFilter) returns (Nothing) { option (method_id) = 12; }
}

service GapPeripheralResponse
{
    option (service_id) = 34;

    rpc Done(Nothing) returns (Nothing) { option (method_id) = 1; }
    rpc DeviceStarted(Nothing) returns (Nothing) { option (method_id) = 2; }
    rpc StateChanged(State) returns (Nothing) { option (method_id) = 3; }
    rpc ResolvableAddress(Address) returns (Nothing) { option (method_id) = 4; }
    rpc DisplayPasskey(Passkey) returns (Nothing) { option (method_id) = 5; }
}

service GapCentralResponse
{
    option (service_id) = 35;

    rpc Done(Nothing) returns (Nothing) { option (method_id) = 1; }
    rpc DeviceDiscovered(DiscoveredDevice) returns (Nothing) { option (method_id) = 2; }
    rpc StateChanged(State) returns (Nothing) { option (method_id) = 3; }
    rpc PairingSuccessfullyCompleted(Nothing) returns (Nothing) { option (method_id) =  4; }
    rpc PairingFailed(PairingStatus) returns (Nothing) { option (method_id) = 5; }
    rpc NumberOfBondsChanged(UInt32Value) returns (Nothing) { option (method_id) = 6; }
    rpc DeviceStarted(Nothing) returns (Nothing) { option (method_id) = 7; }
}
