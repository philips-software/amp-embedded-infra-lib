#include "infra/util/test_helper/MemoryRangeMatcher.hpp"
#include "services/util/AesCmac.hpp"
#include <gmock/gmock.h>

namespace
{
    template<class T, std::size_t N>
    void Copy(std::array<T, N> from, infra::MemoryRange<T> to)
    {
        assert(from.size() == to.size());
        std::copy(from.begin(), from.begin() + from.size(), to.begin());
    }

    class Aes128EcbMock
        : public services::Aes128Ecb
    {
    public:
        using Key = std::array<uint8_t, 16>;

        MOCK_METHOD(void, SetKey, (const Key&), (const, override));
        MOCK_METHOD(void, Encrypt, (infra::ConstByteRange, infra::ByteRange), (const, override));
        MOCK_METHOD(void, Decrypt, (infra::ConstByteRange, infra::ByteRange), (const, override));
    };

    class Aes128CmacImplTest
        : public testing::Test

    {
    public:
        Aes128CmacImplTest()
        {
            EXPECT_CALL(aes128EcbMock, SetKey(key));
            aes.SetKey(key);
        }

        testing::StrictMock<Aes128EcbMock> aes128EcbMock;
        services::Aes128CmacImpl aes{ aes128EcbMock };
        std::array<uint8_t, 16> key{ { 0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c } };
    };
}

TEST_F(Aes128CmacImplTest, plain_data_empty)
{
    std::array<uint8_t, 16> macExpected{ { 0xbb, 0x1d, 0x69, 0x29, 0xe9, 0x59, 0x37, 0x28, 0x7f, 0xa3, 0x7d, 0x12, 0x9b, 0x75, 0x67, 0x46 } };

    ::testing::InSequence _;

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0x0c, 0x6b, 0xf7, 0x7d, 0xb3, 0x99, 0xb8, 0x1a, 0x47, 0xf0, 0x42, 0x3e, 0x6f, 0x54, 0x1b, 0xb9 }, result);
        });

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0x30, 0xac, 0xdd, 0x77, 0xcc, 0x66, 0xe2, 0x6a, 0x1e, 0xc1, 0x0b, 0xf9, 0x3b, 0x51, 0x6d, 0xe4 }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0x29, 0x69, 0x1d, 0xbb, 0x28, 0x37, 0x59, 0xe9, 0x12, 0x7d, 0xa3, 0x7f, 0x46, 0x67, 0x75, 0x9b }, result);
        });

    aes.Append(infra::ConstByteRange());
    EXPECT_TRUE(aes.Calculate() == macExpected);
}

TEST_F(Aes128CmacImplTest, plain_data_16_bytes)
{
    std::array<uint8_t, 16> plainData = { { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a } };
    std::array<uint8_t, 16> macExpected{ { 0x07, 0x0a, 0x16, 0xb4, 0x6b, 0x4d, 0x41, 0x44, 0xf7, 0x9b, 0xdd, 0x9d, 0xd0, 0x4a, 0x28, 0x7c } };

    ::testing::InSequence _;

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0x0c, 0x6b, 0xf7, 0x7d, 0xb3, 0x99, 0xb8, 0x1a, 0x47, 0xf0, 0x42, 0x3e, 0x6f, 0x54, 0x1b, 0xb9 }, result);
        });

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0xfa, 0x68, 0x2f, 0x90, 0xf0, 0xac, 0x31, 0x1b, 0x9e, 0x9e, 0xb8, 0x95, 0xf4, 0xbf, 0xa5, 0x01 }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0xb4, 0x16, 0x0a, 0x07, 0x44, 0x41, 0x4d, 0x6b, 0x9d, 0xdd, 0x9b, 0xf7, 0x7c, 0x28, 0x4a, 0xd0 }, result);
        });

    aes.Append(plainData);
    EXPECT_TRUE(aes.Calculate() == macExpected);
}

TEST_F(Aes128CmacImplTest, plain_data_40_bytes)
{
    std::array<uint8_t, 40> plainData = { { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11 } };
    std::array<uint8_t, 16> macExpected{ { 0xdf, 0xa6, 0x67, 0x47, 0xde, 0x9a, 0xe6, 0x30, 0x30, 0xca, 0x32, 0x61, 0x14, 0x97, 0xc8, 0x27 } };

    ::testing::InSequence _;

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0xe2, 0xbe, 0xc1, 0x6b, 0x96, 0x9f, 0x40, 0x2e, 0x11, 0x7e, 0x3d, 0xe9, 0x2a, 0x17, 0x93, 0x73 }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0xb4, 0x7b, 0xd7, 0x3a, 0x60, 0x36, 0x7a, 0x0d, 0xf3, 0xca, 0x9e, 0xa8, 0x97, 0xef, 0x66, 0x24 }, result);
        });

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0xe3, 0xf1, 0xfa, 0x94, 0xfc, 0x9a, 0x79, 0x13, 0x5f, 0xa5, 0x29, 0x36, 0xc6, 0x61, 0xc9, 0x61 }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0x7f, 0xc1, 0x48, 0xb1, 0x92, 0xe6, 0x9e, 0x30, 0x7c, 0xe5, 0x7a, 0x28, 0x49, 0xdd, 0x2a, 0xf1 }, result);
        });

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0x0c, 0x6b, 0xf7, 0x7d, 0xb3, 0x99, 0xb8, 0x1a, 0x47, 0xf0, 0x42, 0x3e, 0x6f, 0x54, 0x1b, 0xb9 }, result);
        });

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0x09, 0x71, 0x5d, 0x76, 0x4f, 0x64, 0x20, 0xf9, 0x62, 0x24, 0x71, 0x51, 0x72, 0x8c, 0x47, 0x15 }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0x47, 0x67, 0xa6, 0xdf, 0x30, 0xe6, 0x9a, 0xde, 0x61, 0x32, 0xca, 0x30, 0x27, 0xc8, 0x97, 0x14 }, result);
        });

    aes.Append(plainData);
    EXPECT_TRUE(aes.Calculate() == macExpected);
}

TEST_F(Aes128CmacImplTest, plain_data_64_bytes)
{
    std::array<uint8_t, 64> plainData = { { 0x6b, 0xc1, 0xbe, 0xe2, 0x2e, 0x40, 0x9f, 0x96, 0xe9, 0x3d, 0x7e, 0x11, 0x73, 0x93, 0x17, 0x2a,
        0xae, 0x2d, 0x8a, 0x57, 0x1e, 0x03, 0xac, 0x9c, 0x9e, 0xb7, 0x6f, 0xac, 0x45, 0xaf, 0x8e, 0x51,
        0x30, 0xc8, 0x1c, 0x46, 0xa3, 0x5c, 0xe4, 0x11, 0xe5, 0xfb, 0xc1, 0x19, 0x1a, 0x0a, 0x52, 0xef,
        0xf6, 0x9f, 0x24, 0x45, 0xdf, 0x4f, 0x9b, 0x17, 0xad, 0x2b, 0x41, 0x7b, 0xe6, 0x6c, 0x37, 0x10 } };
    std::array<uint8_t, 16> macExpected{ { 0x51, 0xf0, 0xbe, 0xbf, 0x7e, 0x3b, 0x9d, 0x92, 0xfc, 0x49, 0x74, 0x17, 0x79, 0x36, 0x3c, 0xfe } };

    ::testing::InSequence _;

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0xe2, 0xbe, 0xc1, 0x6b, 0x96, 0x9f, 0x40, 0x2e, 0x11, 0x7e, 0x3d, 0xe9, 0x2a, 0x17, 0x93, 0x73 }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0xb4, 0x7b, 0xd7, 0x3a, 0x60, 0x36, 0x7a, 0x0d, 0xf3, 0xca, 0x9e, 0xa8, 0x97, 0xef, 0x66, 0x24 }, result);
        });

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0xe3, 0xf1, 0xfa, 0x94, 0xfc, 0x9a, 0x79, 0x13, 0x5f, 0xa5, 0x29, 0x36, 0xc6, 0x61, 0xc9, 0x61 }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0x7f, 0xc1, 0x48, 0xb1, 0x92, 0xe6, 0x9e, 0x30, 0x7c, 0xe5, 0x7a, 0x28, 0x49, 0xdd, 0x2a, 0xf1 }, result);
        });

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0x39, 0xdd, 0x80, 0x81, 0x83, 0x02, 0xc2, 0x93, 0x65, 0x24, 0x81, 0xcd, 0xa6, 0x8f, 0x20, 0xeb }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0xbf, 0x11, 0x3d, 0xc9, 0xdc, 0xc5, 0x08, 0xaf, 0x7b, 0xb3, 0x90, 0x4d, 0x2b, 0x00, 0xee, 0x4d }, result);
        });

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0x0c, 0x6b, 0xf7, 0x7d, 0xb3, 0x99, 0xb8, 0x1a, 0x47, 0xf0, 0x42, 0x3e, 0x6f, 0x54, 0x1b, 0xb9 }, result);
        });

    EXPECT_CALL(aes128EcbMock, Encrypt(infra::ContentsEqual(std::array{ 0xe2, 0xe3, 0x4c, 0xc4, 0xad, 0x6d, 0x36, 0x45, 0x8f, 0x12, 0x3e, 0x9c, 0xe5, 0x9f, 0xb4, 0xd9 }), ::testing::_)).WillOnce([](auto, auto result)
        {
            Copy(std::array<uint8_t, 16>{ 0xbf, 0xbe, 0xf0, 0x51, 0x92, 0x9d, 0x3b, 0x7e, 0x17, 0x74, 0x49, 0xfc, 0xfe, 0x3c, 0x36, 0x79 }, result);
        });

    aes.Append(plainData);
    EXPECT_TRUE(aes.Calculate() == macExpected);
}
