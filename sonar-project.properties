sonar.projectKey=philips-software_embeddedinfralib
sonar.organization=philips-software

sonar.projectName=embeddedinfralib
sonar.projectVersion=${env.SONAR_PROJECT_VERSION}

sonar.links.homepage=https://github.com/philips-software/embeddedinfralib
sonar.links.ci=https://github.com/philips-software/embeddedinfralib/actions
sonar.links.issue=https://github.com/philips-software/embeddedinfralib/issues
sonar.links.scm=https://github.com/philips-software/embeddedinfralib.git

sonar.sources=hal,infra,lwip/lwip_cpp,protobuf,services,upgrade
sonar.tests=hal,infra,protobuf,services,upgrade
sonar.test.inclusions=**/test/*,**/test_doubles/*

sonar.cfamily.cache.enabled=false
sonar.cfamily.threads=2

sonar.coverageReportPaths=coverage.xml
sonar.coverage.exclusions=**/Tracing*.cpp,**/Main.cpp,lwip/*

# Project specific ignored rules
sonar.issue.ignore.multicriteria=e1,e2,e3,e4,e5,e6

# Access specifiers should not be redundant [cpp:S3539]
#
# We allow duplicate access specifiers to distinguish
# between 'logical' blocks
# (i.e. separate private methods from private variables)
sonar.issue.ignore.multicriteria.e1.ruleKey=cpp:S3539
sonar.issue.ignore.multicriteria.e1.resourceKey=**/*.hpp

# Methods should not be empty [cpp:S1186]
#
# We allow empty methods without a comment describing
# why they are empty. An often used paradigm in inheritance
# trees in our code. Considered a common convention.
sonar.issue.ignore.multicriteria.e2.ruleKey=cpp:S1186
sonar.issue.ignore.multicriteria.e2.resourceKey=**/*.?pp

# A call to "wait()" on a "std::condition_variable" should have a condition [cpp:S5404]
#
# wait() without conditions is actually not dangerous at all,
# especially when there is only one thread waiting on a condition.
sonar.issue.ignore.multicriteria.e3.ruleKey=cpp:S5404
sonar.issue.ignore.multicriteria.e3.resourceKey=**/*.?pp

# "std::move" and "std::forward" should not be confused [cpp:S5417]
#
# SonarQube incorrectly flags usages of std::forward in template code.
sonar.issue.ignore.multicriteria.e4.ruleKey=cpp:S5417
sonar.issue.ignore.multicriteria.e4.resourceKey=**/*.?pp

# Objects should not be sliced [cpp:S5912]
#
# Our WithStorage paradigm inevitably results in lots of objects being sliced
# in a non-dangerous way.
sonar.issue.ignore.multicriteria.e5.ruleKey=cpp:S5912
sonar.issue.ignore.multicriteria.e5.resourceKey=**/*.?pp

# "override" or "final" should be used instead of "virtual" [cpp:S3471]
#
# In this project it was decided to make use of the virtual keyword 
# to indicate a function is to be overwritten and/or is overriding
# in a non-dangerous way.
sonar.issue.ignore.multicriteria.e6.ruleKey=cpp:S3471
sonar.issue.ignore.multicriteria.e6.resourceKey=**/*.hpp
