#include "gtest/gtest.h"
#include "hal/synchronous_interfaces/test_doubles/SynchronousFixedRandomDataGenerator.hpp"
#include "upgrade/pack_builder/ImageSecurityXteaHmac.hpp"

class TestImageSecurityXteaHmac
    : public testing::Test
{
public:
    TestImageSecurityXteaHmac()
        : randomDataGenerator(std::vector<uint8_t>{ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 })
        , encrypter(randomDataGenerator, xteaKey, hmacKey)
    {}

    hal::SynchronousFixedRandomDataGenerator randomDataGenerator;
    application::ImageSecurityXteaHmac encrypter;

    const std::array<uint8_t, 16> xteaKey { {
        0xeb, 0x16, 0xab, 0x4f, 0xff, 0x4f, 0xa6, 0xdc,
        0x2a, 0x36, 0x00, 0x74, 0xa7, 0xc0, 0x62, 0x3a
    } };

    const std::array<uint8_t, 32> hmacKey { {
        0xeb, 0x57, 0xed, 0x0c, 0x74, 0xbb, 0xba, 0x99,
        0x79, 0xca, 0x80, 0x9e, 0x5d, 0x08, 0xfb, 0x6f,
        0x91, 0xc3, 0x2e, 0x32, 0x27, 0x14, 0x6a, 0x83,
        0x5e, 0x71, 0x71, 0x98, 0xed, 0xe8, 0xa3, 0xa5
    } };
};

TEST_F(TestImageSecurityXteaHmac, Secure)
{
    EXPECT_EQ((std::vector<uint8_t>{
        0x94, 0x1d, 0xdd, 0x9e, 0x02, 0x73, 0xcf, 0x57, 
        0x31, 0x66, 0x74, 0x4a, 0x27, 0xab, 0x8d, 0x4b, 
        0x16, 0x6a, 0x6d, 0xdc, 0x71, 0xa1, 0xd3, 0x2b, 
        0xb8, 0x89, 0x43, 0x7b, 0x4d, 0x13, 0x33, 0x77, 
        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 
        0x61, 0xcc, 0x0f, 0x69, 0xe3, 0xaa, 0x39, 0x85}), encrypter.Secure(std::vector<uint8_t>{1, 2, 3, 4}));
}
